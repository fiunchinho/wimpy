---

wimpy_application_deploy_strategy: "RollingUpdate"
wimpy_application_github_repository: ""
wimpy_application_bootstrap_timeout: 500s # If a systemd service does not signal start-up completion within the configured time, the service will be considered failed and will be shut down again
wimpy_application_signal_retries: 10
wimpy_application_environment_vars: {}
wimpy_application_pre_commands: []
wimpy_application_post_commands: []
wimpy_application_additional_units: []

wimpy_docker_compose_version: "1.11.1"
wimpy_docker_compose_file: "{{ lookup('env','PWD') }}/docker-compose-{{ wimpy_deployment_environment }}.yml"
wimpy_docker_compose_template: "templates/docker-compose.yml.j2"

# Launch Configuration
wimpy_aws_region: "eu-west-1"
wimpy_aws_ami_id: "{{ wimpy_aws_coreos_amis[wimpy_aws_region] }}"
wimpy_aws_instance_type: "t2.small"
wimpy_aws_assign_public_ip: "{{ (wimpy_aws_elb_scheme == 'internet-facing') }}"
wimpy_aws_coreos_amis:
  eu-central-1: "ami-c6f424a9"
  ap-northeast-1: "ami-ad0f2bca"
  us-gov-west-1: "ami-070f8a66"
  ap-northeast-2: "ami-2163b04f"
  ca-central-1: "ami-d004b9b4"
  ap-south-1: "ami-286d1e47"
  sa-east-1: "ami-c51675a9"
  ap-southeast-2: "ami-32d2dd51"
  ap-southeast-1: "ami-deeb54bd"
  us-east-1: "ami-6bb93c7d"
  us-east-2: "ami-40f7d325"
  us-west-2: "ami-fcc4539c"
  us-west-1: "ami-ef015b8f"
  eu-west-1: "ami-f6a49b90"
  eu-west-2: "ami-16150172"

# CloudWatch logs
wimpy_aws_cloudwatch_enabled: True
wimpy_aws_cloudwatch_log_level: 7

# Route53
wimpy_aws_dns_name: "{{ wimpy_application_name }}"
wimpy_aws_dns_ttl: "60"
wimpy_aws_dns_weight: "10"

# KMS
wimpy_aws_kms_key: ""

# S3
wimpy_aws_s3_application_bucket: ""
wimpy_aws_s3_bucket: ""

# Elastic Load Balancer
wimpy_aws_elb_enable: True # Whether or not to assign an ELB in front of the ASG instances
wimpy_aws_elb_scheme: "internet-facing" # Private or public ip's for instances behind. Possible values: 'internal' or 'internet-facing'
wimpy_aws_elb_draining_timeout: "10" # Wait a specified timeout allowing connections to drain before terminating an instance
wimpy_aws_elb_enable_draining: "True"
wimpy_aws_elb_cross_az: "no" # Distribute load across all configured Availability Zones
wimpy_aws_elb_stickiness:
  enabled: no
  type: "loadbalancer"
wimpy_aws_elb_healthcheck_ping_protocol: "http"
wimpy_aws_elb_healthcheck_ping_path: "/health"
wimpy_aws_elb_healthcheck_response_timeout: 5
wimpy_aws_elb_healthcheck_interval: 10
wimpy_aws_elb_healthcheck_unhealthy_threshold: 2
wimpy_aws_elb_healthcheck_healthy_threshold: 3
wimpy_aws_elb_listeners:
  - protocol: "http"
    load_balancer_port: "80"
    instance_port: "{{ wimpy_application_port }}"

# Auto Scaling Group
wimpy_aws_autoscaling_keep_launch_configurations: "1"
wimpy_aws_autoscaling_min_size: "1"
wimpy_aws_autoscaling_max_size: "2"
wimpy_aws_autoscaling_desired_capacity: "1"
wimpy_aws_autoscaling_healthcheck_grace_period: "300"
wimpy_aws_autoscaling_signal_count: "1"
wimpy_aws_autoscaling_signal_timeout: "PT3M"
wimpy_aws_autoscaling_signal_min_successful: "100" # Percentage
wimpy_aws_autoscaling_destroy_previous: True
wimpy_aws_autoscaling_high_cpu_threshold: "85"
wimpy_aws_autoscaling_low_cpu_threshold: "20"
wimpy_aws_autoscaling_policies:
  - name: "ScalingPolicyCpuHigh"
    adjustment_type: "ChangeInCapacity"
    cooldown: 300
    metric_aggregation_type: "Average"
    policy_type: "SimpleScaling"
    scaling_adjustment: 1
  - name: "ScalingPolicyCpuLow"
    adjustment_type: "ChangeInCapacity"
    cooldown: 300
    metric_aggregation_type: "Average"
    policy_type: "SimpleScaling"
    scaling_adjustment: -1
wimpy_aws_autoscaling_alarms:
  - name: "AlarmCpuHigh"
    namespace: "AWS/EC2"
    metric: "CPUUtilization"
    statistics: "Average"
    comparison: "GreaterThanOrEqualToThreshold"
    threshold: "{{ wimpy_aws_autoscaling_high_cpu_threshold }}"
    period: 300
    evaluation_periods: 2
    unit: "Percent"
    description: "CPU utilization is >= {{ wimpy_aws_autoscaling_high_cpu_threshold }}% for two periods of 5 minutes."
    dimensions:
      AutoScalingGroupName: "{{ wimpy_asg_name }}"
    scaling_policy_name: "ScalingPolicyCpuHigh"

  - name: "AlarmCpuLow"
    namespace: "AWS/EC2"
    metric: "CPUUtilization"
    statistics: "Average"
    comparison: "LessThanThreshold"
    threshold: "{{ wimpy_aws_autoscaling_low_cpu_threshold }}"
    period: 300
    evaluation_periods: 2
    unit: "Percent"
    description: "CPU utilization is < {{ wimpy_aws_autoscaling_low_cpu_threshold }}% for two periods of 5 minutes"
    dimensions:
      AutoScalingGroupName: "{{ wimpy_asg_name }}"
    scaling_policy_name: "ScalingPolicyCpuLow"
